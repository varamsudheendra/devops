My DevOps Day 5 Notes: Connecting to AWS EC2 & Cracking Automation! üöÄ

Alright, Day 5 was all about getting hands-on with AWS EC2 instances ‚Äì logging in, and, most importantly, how to stop doing things manually and start automating. This is where DevOps really kicks in!

---

### 1. VM Creation: Beyond the Basics üí°

We've already covered what VMs are and how to spin them up. Today was about getting **inside** those VMs and making the whole creation process super efficient. Manual creation? Nah, that's not the DevOps way, especially when you need tons of machines!

---

### 2. How I Can Automate My AWS VM Creations ‚öôÔ∏è

This is the cool part! AWS gives us a bunch of ways to automate, which is awesome for a DevOps engineer:

* **AWS API:** Directly talking to AWS services programmatically.
* **AWS CDK (Cloud Development Kit):** Write code (like Python!) to define my cloud setup. Super modern.
* **AWS CLI (Command Line Interface):** My terminal is my new best friend for talking to AWS.
* **AWS CloudFormation Templates (CFT):** This is **Infrastructure as Code (IaC)**. I can write down my entire AWS setup in a file (YAML/JSON) and AWS builds it.
* **Terraform:** Another big one for IaC, but it's **multi-cloud**. So, if my company uses AWS *and* Azure, Terraform can handle both. This is key for "Hybrid Cloud" setups.

---

### 3. Getting Inside My AWS EC2 Instance üîë

Two main ways to log in, but one is clearly better for DevOps.

#### A. The AWS Console Way (UI-based) üåê

* **How I do it:** Go to AWS Console -> EC2 Dashboard -> Select instance -> Click "Connect" -> Click "Connect" again. It opens a web terminal.
* **What I did:** Tried `touch Abhishek` and `ls` to see it work.
* **Why it's NOT ideal for DevOps:** It's okay for a quick check, but for daily work or managing many VMs, it's too slow and clumsy. Not for pros!

#### B. The Terminal Way (CLI-based) üíª

This is the real deal. I need a proper terminal on my laptop:

* **My Terminal Choices:**
    * **Mac:** `iTerm2` (Abhishek recommended this).
    * **Windows:** `PuTTY` (common), `MobaXterm` (better UI, lighter, recommended by Abhishek), or `NoMachine`.
* **Connecting with SSH:**
    1.  First, grab my EC2 instance's **Public IP address** from the AWS console. (Remember, Private IPs are just for inside AWS).
    2.  Basic command: `ssh Ubuntu@<Public_IP_Address>` (Default username for Ubuntu AMIs is `Ubuntu`).
    3.  **Oops, Permission Denied!** I forgot my PEM file.
    4.  **Fix 1: Add my PEM file:** `ssh -i <path_to_my_pem_file> Ubuntu@<Public_IP_Address>`. (Example: `ssh -i downloads/mykey.pem Ubuntu@<Public_IP_Address>`).
    5.  **Oops again, Permissions too Open!** My `.pem` file is super sensitive, so its permissions need to be tight.
    6.  **Fix 2: Secure my PEM file:** `chmod 600 <path_to_my_pem_file>`. This makes sure *only I* can read/write to it.
    7.  **Success!** Ran the `ssh -i ...` command again, and I was in!
    8.  **Verification:** Created `touch Abhishek2` and `ls` to confirm. Good to go!

---

### 4. Cleaning Up: Deleting AWS EC2 Instances üóëÔ∏è

Important for managing costs and keeping my AWS account tidy.

* **Stop First:** Go to EC2 dashboard -> Select instance -> Instance State -> "Stop Instance." Good practice before deleting.
* **Then Terminate:** After stopping, select "Terminate Instance." This deletes it permanently.
* **Cost Tip:** AWS charges when the instance is **running**. So, stopping saves money, and terminating stops all charges for that instance.

---

### 5. Automating EC2 Creation with AWS CLI ü§ñ

This is where the power of automation really shines.

* **What is AWS CLI?** It's my direct command-line access to AWS.
* **Installation:**
    1.  Download the AWS CLI installer from AWS docs (for my OS).
    2.  Run the installer.
    3.  **Verify:** `aws --version` should show it's installed.
* **Authentication (Crucial!):** My CLI needs permission to talk to *my* AWS account.
    1.  Go to AWS Console -> My user dropdown -> "Security credentials."
    2.  Under "Access Keys," "Create access key."
    3.  **BIG WARNING:** Copy my **Access Key ID** and **Secret Access Key**. **NEVER SHARE THESE!** Store them safely.
    4.  In my terminal, run `aws configure`.
    5.  Paste my Access Key ID and Secret Access Key when asked.
    6.  Set my default region (e.g., `us-east-1`) and output format (e.g., `json`).
    7.  Now my CLI is ready to talk to AWS!
* **CLI Examples (Super Useful!):**
    * List S3 buckets: `aws s3 ls` (This is way faster than the UI!).
    * Create an S3 bucket: `aws s3 mb s3://my-unique-bucket-name` (Bucket names must be globally unique!).
    * **For EC2 creation:** The exact commands are in the AWS CLI docs (look for `aws ec2 run-instances`). I'll need details like AMI ID, instance type, key pair name, etc.
    * **Automation Power:** I can put these CLI commands into shell scripts, Python scripts, or even manage them in GitHub!

---

### 6. CloudFormation Templates (CFT): Infrastructure as Code! üìù

This is a key DevOps concept.

* **Idea:** Instead of clicking around, I describe my entire AWS infrastructure (like an EC2 instance, a security group, etc.) in a file (YAML or JSON). CloudFormation then reads this file and builds everything for me. It's **declarative** ‚Äì I say *what* I want, not *how* to build it step-by-step.
* **Where to find examples:** AWS Labs on GitHub has tons of sample CFTs.
* **How it works (briefly):** Go to AWS Console -> CloudFormation -> "Create stack" -> Upload my template. CloudFormation handles the rest.
* **Next Level:** We'll dive deeper into CFTs (and Terraform) in future IaC videos.

---

### 7. Scripting with AWS API (Boto3 - Python SDK) üêç

For developers or those who love scripting, this is awesome.

* **Concept:** Directly interact with AWS services using a programming language. Python is a great choice.
* **Boto3:** This is the official AWS SDK for Python. It makes talking to AWS super easy from my Python code.
* **Docs:** `boto3.amazonaws.com` is my go-to for all the details.
* **Credentials:** Boto3 automatically uses the credentials I set up with `aws configure`.
* **Simple Example Idea:** A Python script using `import boto3` to list running EC2 instances.

---

### 8. My Homework & Key Takeaways! üéì

* **Review:** I learned about connecting via UI/CLI, and the basics of AWS CLI, CloudFormation, and Boto3.
* **Crucial Step:** **Always create my Security Credentials (Access Key ID/Secret Access Key) first, and then run `aws configure` to set up my CLI.** This is foundational!
* **My Assignment (Gotta do this!):**
    1.  Install AWS CLI on my laptop.
    2.  Create my AWS security credentials.
    3.  Authenticate AWS CLI using `aws configure`.
    4.  Make some AWS calls with the CLI:
        * `aws s3 ls` (list S3 buckets).
        * Maybe create one: `aws s3 mb s3://my-unique-bucket-name`.
        * List EC2 instances: `aws ec2 describe-instances`.
        * Even try creating an EC2 instance following AWS CLI docs.
    5.  **REMEMBER:** Use the official AWS CLI documentation as my bible for commands and examples.
* **My Learning Philosophy:** This course gives me the **breadth** (wide overview), but it's *my job* to use the documentation and assignments to get the **depth**. Self-study is key!

---

This was a packed day! Time to get my hands dirty with the CLI assignments. üí™
