

## Day-4 | Understanding and Creating Virtual Machines (VMs) üñ•Ô∏è

This video, part of the DevOps Zero to Hero course, focuses on understanding and creating Virtual Machines (VMs) on popular cloud platforms like AWS and Azure, as well as the concept of on-premise VMs.

---

### 1. Key Concepts: From Physical Servers to VMs üí°

* **Servers:** The fundamental building blocks of IT infrastructure.
* **Physical Servers:** Traditional, dedicated hardware machines.
* **Virtual Machines (VMs):** Software-based emulations of a physical computer. They allow multiple isolated operating systems to run on a single piece of hardware. This is a crucial evolution in IT, moving away from traditional data centers towards cloud platforms. ‚òÅÔ∏è

---

### 2. Creating Virtual Machines on Cloud Platforms üöÄ

Cloud providers like AWS and Azure simplify VM creation significantly.

* **The Process (Cloud Providers):**
    1.  As a user, you log into the cloud provider's console (e.g., AWS Console, Azure Portal) from your laptop.
    2.  You request to create a VM (called an **EC2 instance** in AWS) through the user interface (UI).
    3.  The cloud provider provisions the VM and provides you with its IP address and specifications.

* **Practical Demonstration (AWS EC2):**
    * **Access:** Go to `signin.aws.com`.
    * **Account Creation:** New users can sign up; a small ‚Çπ2 deduction for card validation is common in India for free-tier activation. AWS offers a generous free tier (often one year).
    * **Launching an Instance:**
        * Search for and select the "EC2" service.
        * Go to "Instances" and click "Launch instance."
        * **Name:** Give your instance a name (e.g., "my-devops-vm").
        * **Operating System (OS):** Choose an OS (Ubuntu is highly recommended for DevOps due to its widespread use).
        * **Free Tier Eligible:** **Crucially, select "Free tier eligible"** to avoid charges. This limits resources (e.g., 1 CPU, 1GB memory).
        * **Key Pair:** **Create a new Key Pair (.pem file) and download it.** This file is essential for securely logging into your VM later. **Save it carefully!** You cannot log in without it. üîë
        * Click "Launch instance." Your VM will be ready in a few minutes.

* **Practical Demonstration (Microsoft Azure):**
    * **Access:** Go to `portal.azure.com`.
    * **Account Creation:** Azure offers easy sign-up, including GitHub integration. Azure's free tier for new learners is typically shorter (around 30-45 days) compared to AWS.
    * **VM Creation:** The steps are similar to AWS: "Create resource" -> "Virtual machines," then follow the prompts. The underlying concept is the same across cloud providers.

---

### 3. Automation in DevOps for VM Creation ‚öôÔ∏è

Manually creating VMs via UI is inefficient and error-prone, especially for many requests. DevOps emphasizes **automation** to save time and prevent human errors.

* **AWS API:** Cloud providers like AWS expose **APIs (Application Programming Interfaces)** (e.g., AWS EC2 API). These APIs allow programmatic requests to provision resources.
* **Methods to Automate VM Creation (Scripts & Tools):**
    * **AWS CLI (Command Line Interface):** Automate VM creation using commands directly from your terminal. ‚å®Ô∏è
    * **Direct AWS API Interaction:** Use programming languages (like Python with `boto3`) to make direct API calls. üêç
    * **AWS CFT (CloudFormation Templates):** Use declarative JSON/YAML templates to define and provision AWS resources. This is **Infrastructure as Code (IaC)**. üìù
    * **AWS CDK (Cloud Development Kit):** A newer IaC option that lets you define cloud infrastructure using familiar programming languages (e.g., Python, TypeScript). It often gets early support for new AWS services. üë®‚Äçüíª
    * **Terraform:** A very popular **cloud-agnostic** IaC tool. It can manage resources across multiple cloud providers (AWS, Azure, GCP, etc.). This makes it ideal for **"Hybrid Cloud" models**, where organizations use different cloud platforms simultaneously. üåê

* **Choosing the Right Tool (Interview Perspective):**
    * Don't just pick a tool because it's popular (like Terraform).
    * Consider your organization's strategy:
        * If the organization is **solely on AWS** now and in the future, AWS-specific tools (CDK, CLI, API, CFT) might be better due to deeper integration and earlier support for new AWS services.
        * If the organization uses a **Hybrid Cloud Model** (e.g., GCP for AI/ML, AWS for other services), then Terraform is an excellent choice for consistent automation across platforms.

