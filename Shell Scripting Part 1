# Shell Scripting - Day 1: Zero to Hero ‚ú®


Shell scripting is the practice of writing a series of commands for the shell to automate tasks. This note introduces the essentials with use cases, examples, and commands that are foundational for DevOps roles.

---

## üéì What is Shell Scripting?

Shell scripting allows automation of repetitive tasks on Linux/Unix systems using `.sh` files containing command sequences.

**Why use it?**

* Reduces manual work
* Ensures consistency
* Useful for managing files, users, permissions, and more

**Example Use Case:**

```bash
# Create 1000 files quickly
for i in {1..1000}; do
  touch file_$i.txt
done
```

---

## üîß Essential Linux Commands

| Command    | Description                                  |
| ---------- | -------------------------------------------- |
| `touch`    | Creates an empty file                        |
| `ls`       | Lists directory contents                     |
| `ls -ltr`  | Long listing with timestamps sorted by time  |
| `man`      | Manual/help for commands (e.g., `man touch`) |
| `vi`/`vim` | Text editors                                 |
| `cat`      | Displays contents of a file                  |
| `chmod`    | Changes file permissions                     |
| `pwd`      | Shows current directory                      |
| `mkdir`    | Makes a new directory                        |
| `cd`       | Changes directory                            |
| `rm -rf`   | Deletes folders/files forcefully             |
| `history`  | Shows previous commands                      |

---

## ‚úçÔ∏è Writing Your First Script

### Steps

```bash
# Step 1: Create file
$ touch myscript.sh

# Step 2: Open in editor
$ vi myscript.sh
```

Inside the file:

```bash
#!/bin/bash
echo "My name is Abhishek"
```

Then:

```bash
# Step 3: Save and quit (in vi)
Esc + :wq!

# Step 4: Make script executable
$ chmod 777 myscript.sh

# Step 5: Run script
$ ./myscript.sh
```

---

## üí° Understanding the Shebang (`#!`)

### Purpose

Specifies the interpreter to be used for script execution.

### Example

```bash
#!/bin/bash
```

* `/bin/bash` ‚Üí Bash shell (preferred)
* `/bin/sh` ‚Üí POSIX shell (can point to `dash`, not recommended for bash-specific syntax)

### Why it Matters

* Ensures compatibility
* Avoids syntax issues in mixed environments

---

## üß™ Script Example - Creating Files and Folders

### Goal

* Create directory `Abhishek`
* Navigate into it
* Create two files

### Script

```bash
#!/bin/bash
mkdir Abhishek
cd Abhishek
touch first.txt second.txt
```

### Run

```bash
chmod 777 sample.sh
./sample.sh
```

---

## ‚öôÔ∏è DevOps Use Cases for Shell Scripting

* **Infrastructure automation** (e.g., provisioning servers)
* **Monitoring** (e.g., CPU and memory usage)
* **CI/CD workflows** (e.g., deploy, rollback)
* **Backup and cleanup tasks**

### Example: Node Health Check

```bash
#!/bin/bash
echo "CPU cores: $(nproc)"
echo "Memory info:"
free -h
top -b -n 1 | head -n 10
```

---

## ‚ùì Common Interview Questions

1. What does the `#!/bin/bash` line do?
2. How is `/bin/bash` different from `/bin/sh`?
3. What do numbers in `chmod 755` represent?
4. How do you print the current directory?
5. How would you monitor 1000+ VMs using shell scripts?

